services:
  db:
    image: ankane/pgvector:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  ollama:
    volumes:
      - ./ollama/ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: docker.io/ollama/ollama:latest
    ports:
      - 7869:11434
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_DEBUG=1
    networks:
      - app-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app_db
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - OLLAMA_URL=http://host.docker.internal:7869
      - GOOGLE_OAUTH_CLIENT_ID=283603920028-qgenn6n9029r6ovjsbomooql3o0o6lu6.apps.googleusercontent.com
      - GOOGLE_OAUTH_CLIENT_SECRET=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
      - GOOGLE_REDIRECT_URI=http://localhost:3000/auth/login
      - TORCH_DEVICE=cuda
    depends_on:
      - db
      - redis
      - ollama
    volumes:
      - ./backend:/usr/src/app
    networks:
      - app-network
    command: >
      bash -c "mkdir -p /usr/src/app/logs &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  celery_worker:
    build: ./backend
    command: >
      bash -c "mkdir -p /usr/src/app/logs &&
               celery -A inteldocs worker --loglevel=info --concurrency=1"
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - OLLAMA_URL=http://host.docker.internal:7869
      - TORCH_DEVICE=cuda

    depends_on:
      - backend
    volumes:
      - ./backend:/usr/src/app
    networks:
      - app-network
    extra_hosts:
      - host.docker.internal:host-gateway
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network
    command: npm run dev
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - HOST=0.0.0.0
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=localhost

  jupyter:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    volumes:
      - ./backend:/usr/src/app
      - ./notebooks:/usr/src/app/notebooks
    networks:
      - app-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app_db
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - OLLAMA_URL=http://host.docker.internal:7869
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - ollama
      - backend
    command: >
      bash -c "pip install jupyter ipywidgets matplotlib pandas
      && mkdir -p /usr/src/app/notebooks
      && jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''"
    extra_hosts:
      - host.docker.internal:host-gateway
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  notebooks:
